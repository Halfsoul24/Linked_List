/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
//     long double list_int(ListNode* head){
        
//         ListNode* temp = head;
//         long double i=0;
//         long double ans=0;
//         while(temp!=NULL){
//             ans+= pow(10,i)*(temp->val);
//             i++;
//             temp=temp->next;
//         }
//         return ans;
//     }
    
    void insert(ListNode* head, long double data){
        
        ListNode* temp = head;
        ListNode* node = new ListNode(data);
        if(head==NULL){
            
            head->next = node;
        }
        
        while(temp->next!=NULL){
            
            temp = temp->next;
        }
        temp->next = node;
    }
    
//     ListNode *int_list(long double res){
        
//         ListNode* node = new ListNode(0);
        
//         while(res>0){
            
//             long double c = res%10;
//             insert(node, c);
//             res/=10;
//         }
//         // cout<<node->next->val;
//         return node->next;
        
//     }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        int carry =0;
        
        ListNode* dummy = new ListNode(0);
        ListNode* curr = dummy;
        
        while(l1 || l2 || carry){
            
            int sum = 0;
            if(l1){
                sum+=l1->val;
                l1 = l1->next;
            }
            if(l2){
                sum+=l2->val;
                l2 = l2->next;
            }
            
            sum = carry + sum;
            carry = sum/10;
            sum = sum%10;
            insert(curr,sum);
            
            
        }
        return dummy->next;
        
        
    }
};
