/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalin(ListNode* root, ListNode* head){
        
        while(root and head){
            if(root->val != head->val){
                return false;
            }
            root = root->next;
            head = head->next;
        }
        return true;
    }
    
    void print(ListNode* head){
        if(head==NULL){
            return ;
        }
        ListNode* temp = head;
        
        while(temp!=NULL){
            
            cout<<temp->val<<" ";
            temp=temp->next;
            
        }
        cout<<endl;
        
    }
   
    
    bool isPalindrome(ListNode* head) {
        
       stack<int> s;
        ListNode* temp = head;
        while(temp){
            s.push(temp->val);
            temp = temp ->next;
        }
        
        while(head){
            int x = s.top();
            s.pop();
            if(x!=head->val){
                
                return false;
                
            }
            head = head->next;
        }
        return true;
        
        
    }
};
